/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState, useEffect } from "react";
import { useGLTF, meshBounds, useAnimations } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import * as THREE from "three";
import useLastFmData from "@/components/hooks/useLastFmData.js";

export function AnimanoirModelo(props) {
  const { gl } = useThree();
  const group = useRef();
  const { nodes, materials, animations } = useGLTF("./arlequin-belly-RIG");
  const { actions } = useAnimations(animations, group);
  const meshRef = useRef();
  const [clicked, setClicked] = useState(false);
  const lfmData = useLastFmData();

  useEffect(() => {
    // Play the first animation by default
    if (actions && Object.keys(actions).length > 0) {
      const firstAnimation = Object.values(actions)[0];
      firstAnimation.play();
    }
  }, [actions]);

  useEffect(() => {
    if (lfmData.recenttracks?.track?.[0]?.image && meshRef.current) {
      const albumImageUrl = lfmData.recenttracks.track[0].image[3]['#text'];
      const textureLoader = new THREE.TextureLoader();
      textureLoader.load(albumImageUrl, (texture) => {
        const material = new THREE.MeshStandardMaterial({
          map: texture,
          metalness: 1,
          roughness: 0.1,
        });
        meshRef.current.material = material;
      });
    }
  }, [lfmData]);

  useFrame((state, delta) => {
    if (meshRef.current) {
      meshRef.current.rotation.z += delta * -0.3;
    }
  });

  const clickHandler = () => {
    setClicked((prev) => !prev);
    meshRef.current.material.wireframe = !clicked;
  };

  const mouseOverHandler = () => {
    meshRef.current.material.color.set(
      `hsl(${Math.random() * 360}, 100%, 80%)`
    );
  };

  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        onClick={clickHandler}
        ref={meshRef}
        raycast={meshBounds}
        geometry={nodes.Curve.geometry}
        position={[0, -1, 0]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={20}
        onPointerOver={(e) => {
          gl.domElement.style.cursor = "zoom-in";
          mouseOverHandler();
        }}
        onPointerOut={(e) => {
          gl.domElement.style.cursor = "auto";
        }}
      >
      </mesh>
    </group>
  );
}

useGLTF.preload("./arlequin-belly-RIG");
