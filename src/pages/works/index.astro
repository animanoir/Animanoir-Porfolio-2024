---
import BaseHead from "../../components/BaseHead.astro";
import Header from "../../components/Header.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
import { getCollection } from "astro:content";
import { Picture } from "astro:assets";
import Navbar from "@/components/Navbar.astro";

const posts = (await getCollection("works")).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

// Fisher-Yates shuffle algorithm to randomize the posts
for (let i = posts.length - 1; i > 0; i--) {
  const j = Math.floor(Math.random() * (i + 1));
  [posts[i], posts[j]] = [posts[j], posts[i]];
}
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
  </head>
  <body>
    <Header />
    <Navbar />
    <main>
      <section>
        <div class="projectsContainer">
          <ul>
            {
              posts.map((post) => (
                <li class="project">
                  <a href={`/works/${post.slug}/`}>
                    <Picture
                      class="postHeroImg"
                      src={post.data.heroImage}
                      alt={`${post.data.title} by Óscar A. Montiel`}
                      formats={["webp"]}
                      decoding="async"
                      loading="lazy"
                    />
                    <div class="postInfo">
                      <p class="postTitle">{post.data.title}</p>
                      <p class="year">{post.data.year || "on-going"}</p>
                    </div>
                  </a>
                </li>
              ))
            }
          </ul>
        </div>
      </section>
    </main>
    <style>
      .projectsContainer {
        width: 50vw;
        margin: 0 auto;
        padding: 5vh 0;
      }

      ul {
        list-style-type: none;
        padding: unset;
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 0.5rem;
        overflow: hidden;
      }

      ul a {
        filter: hue-rotate(0deg);
        transition: filter 0.5s ease-in-out;
        height: -webkit-fill-available;
      }

      ul a:hover {
        filter: hue-rotate(180deg);
      }

      ul li {
        display: flex;
        flex-direction: column;
      }

      .project {
        position: relative;
        display: block;
      }

      .postTitle,
      .year {
        color: floralwhite;
        font-family: "Montserrat", sans-serif;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
        margin: 0;
        text-align: center;
      }

      .postTitle {
        font-size: 2.3rem;
        padding: 0.8rem;
        line-height: 1;
      }

      .year {
        font-size: 1rem;
      }

      .postInfo {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        display: none;
      }

      .project:hover .postInfo {
        display: block;
      }

      .postHeroImg {
        height: 100%;
        width: 100%;
        object-fit: cover;
        opacity: 0;
        transition: opacity 0.5s ease-in-out;
      }

      .postHeroImg.loaded {
        opacity: 1;
      }

      @media (max-width: 768px) {
        .projectsContainer {
          margin: 0;
          width: 100%;
          padding: 0;
        }

        ul {
          grid-template-columns: 1fr;
          grid-gap: 0;
        }

        .postInfo {
          display: block;
        }
      }
    </style>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        // Función para manejar las imágenes
        const handleImages = (images) => {
          images.forEach((img) => {
            const imageElement = img as HTMLImageElement;
            const addLoadedClass = () => {
              imageElement.classList.add("loaded");
            };
            if (imageElement.complete) {
              addLoadedClass();
            } else {
              imageElement.addEventListener("load", addLoadedClass);
            }
          });
        };

        // Manejar imágenes existentes
        const existingImages = document.querySelectorAll(".postHeroImg");
        handleImages(existingImages);

        // Crear un MutationObserver
        const observer = new MutationObserver((mutations) => {
          mutations.forEach((mutation) => {
            mutation.addedNodes.forEach((node) => {
              if (node.nodeType === 1) {
                // ELEMENT_NODE
                const element = node as Element;
                // Buscar imágenes dentro del nuevo nodo
                const newImages = element.querySelectorAll(".postHeroImg");
                if (newImages.length > 0) {
                  handleImages(newImages);
                }
                // Comprobar si el propio nodo es una imagen
                if (element.classList?.contains("postHeroImg")) {
                  handleImages([element]);
                }
              }
            });
          });
        });

        // Configurar y iniciar el observer
        const config = {
          childList: true,
          subtree: true,
        };

        observer.observe(document.body, config);
      });
    </script>
  </body>
</html>
